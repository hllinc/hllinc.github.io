<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内容理解平台关键模块实施方案</title>
      <link href="/2024/12/13/aiuc-key-module/"/>
      <url>/2024/12/13/aiuc-key-module/</url>
      
        <content type="html"><![CDATA[<h1 id="大文件上传截断方案"><a href="#大文件上传截断方案" class="headerlink" title="大文件上传截断方案"></a>大文件上传截断方案</h1><h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><ol><li>文档按大小限制上传（150M），按字符数限制解析存储（20w）；</li><li>视频按大小限制上传（1G），按字幕字符数限制解析存储（5w）；</li><li>按字符数，限制模型总结字符长度，见 1.1 各模型输入长度限制。</li></ol><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>响应速度更快，前端用户交互体验更好； </li><li>节省调用大模型成本，见 1.3 大模型费用。</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>文件总结的内容不完整</li></ol><h2 id="各模型输入长度与耗时"><a href="#各模型输入长度与耗时" class="headerlink" title="各模型输入长度与耗时"></a>各模型输入长度与耗时</h2><p>各个模型单次的token输入长度限制有差异，并且请求频率也有限制，通过测试对比，以下是测试结果：</p><img src="/2024/12/13/aiuc-key-module/1.png" class=""><p><strong>最终方案如下：</strong></p><img src="/2024/12/13/aiuc-key-module/2.png" class=""><h2 id="同类产品限制"><a href="#同类产品限制" class="headerlink" title="同类产品限制"></a>同类产品限制</h2><p>通过调研发现，目前同类产品都存在以下限制：</p><img src="/2024/12/13/aiuc-key-module/3.png" class=""><h2 id="模型费用"><a href="#模型费用" class="headerlink" title="模型费用"></a>模型费用</h2><table><thead><tr><th>模型名称</th><th>输入</th><th>输出</th><th>链接</th></tr></thead><tbody><tr><td>智谱：GLM-4</td><td>0.1元&#x2F;千tokens</td><td>同输入</td><td><a href="https://open.bigmodel.cn/pricing">ZHIPU AI OPEN PLATFORM</a></td></tr><tr><td>百川：Baichuan2</td><td>0.008元&#x2F;千tokens</td><td>同输入</td><td><a href="https://platform.baichuan-ai.com/price">百川大模型-汇聚世界知识 创作妙笔生花-百川智能</a></td></tr><tr><td>Kimi：moonshot-v1-32k</td><td>0.012元&#x2F;千tokens</td><td>同输入</td><td><a href="https://apidoc-team.smzdm.com/project/2352/interface/api/58221">apidoc-team.smzdm.com</a></td></tr><tr><td>千问：qwen-72b-chat</td><td>0.02元&#x2F;千tokens</td><td>同输入</td><td><a href="https://help.aliyun.com/zh/dashscope/developer-reference/tongyi-qianwen-7b-14b-72b-metering-and-billing">help.aliyun.com</a></td></tr><tr><td>文心：ernie-speed-128k</td><td>0.004元&#x2F;千tokens</td><td>0.008元&#x2F;千tokens</td><td><a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/hlrk4akp7">cloud.baidu.com</a></td></tr><tr><td>gpt-4</td><td>US$30.00 &#x2F; 1M tokens</td><td>US$60.00 &#x2F; 1M tokens</td><td><a href="https://openai.com/api/pricing">https://openai.com/api/pricing</a></td></tr><tr><td>gpt-35-turbo</td><td>US$0.50 &#x2F; 1M tokens</td><td>US$1.50 &#x2F; 1M tokens</td><td><a href="https://openai.com/api/pricing">https://openai.com/api/pricing</a></td></tr></tbody></table><h1 id="多模型切换场景：上下文管理方案"><a href="#多模型切换场景：上下文管理方案" class="headerlink" title="多模型切换场景：上下文管理方案"></a>多模型切换场景：上下文管理方案</h1><p>会话的第一个问题为默认问题，只要切换模型就会自动发起问答。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><ol><li><p>切换模型时，读取上一模型的问答列表存储在堆栈中；</p></li><li><p>与当前模型的问答列表对比，没有问过的留下，按顺序提示用户；</p></li><li><p>用户用户连续跳过3个问题，则清空堆栈。</p></li></ol><p>优点：</p><ol><li>轻量。</li></ol><p>缺点：</p><ol><li><p>刷新页面后丢失提示数据；</p></li><li><p>清空堆栈后所有模型都会丢失数据。</p></li></ol><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><ol><li><p>维护一个问题堆栈和一个map，key为问题的hash，value为列表；</p></li><li><p>当开始问下一个问题时就压入堆栈，并存储该模型名称到value列表中；</p></li><li><p>切换模型时，在第一个问题回答完后，从堆栈中取问题，按顺序提示用户是否问第二、三…个问题；</p></li><li><p>如果用户问了，则记录该模型名称到value列表中，如果跳过了，也记录该模型名称到value列表中；</p></li><li><p>如果用户连续跳过了3个，则把堆栈中所有该模型没问的问题都记录一下，放在对应的value列表中；</p></li><li><p>如果用户新增问题，则继续压入堆栈中，重复2、3、4、5；</p></li><li><p>问题对应的value值存满后，可删除；</p></li><li><p>持久化该堆栈和map，应对刷新场景。</p></li></ol><p>优点：</p><ol><li>可保留所有数据。</li></ol><p>缺点：</p><ol><li>相比方案一较重，看看是否有必要。</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hash(question)&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;zhipu&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;baichuan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;wenxin&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 DrissionPage 实现京东登录及滑块验证</title>
      <link href="/2024/12/12/drission-page-jd-login/"/>
      <url>/2024/12/12/drission-page-jd-login/</url>
      
        <content type="html"><![CDATA[<p>使用 DrissionPage 实现京东登录及滑块验证</p><img src="/2024/12/12/drission-page-jd-login/1.png" class="" title="login"><h1 id="安装-DrissionPage"><a href="#安装-DrissionPage" class="headerlink" title="安装 DrissionPage"></a>安装 DrissionPage</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install drissionpage</span><br></pre></td></tr></table></figure><h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>代码这里我们要实现的主要就是两个功能：</p><ol><li>自动输入用户信息进行登录</li><li>自动操作滑块进行验证并通过</li></ol><p>这里的难点就是滑块的轨迹生成，不过值得高兴的是，登录的这个滑块目前还没有轨迹验证，在后面的商品列表获取时出现的滑块验证才是难点。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="JdCrawler-py"><a href="#JdCrawler-py" class="headerlink" title="JdCrawler.py"></a>JdCrawler.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"><span class="keyword">from</span> DrissionPage <span class="keyword">import</span> Chromium  </span><br><span class="line"><span class="keyword">from</span> track <span class="keyword">import</span> get_tracks  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JdCrawler</span>:  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    京东爬虫  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.browser = Chromium()  </span><br><span class="line">        <span class="variable language_">self</span>.tab = <span class="variable language_">self</span>.browser.latest_tab  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.tab.get(<span class="string">&#x27;https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F&#x27;</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:#loginname&#x27;</span>).<span class="built_in">input</span>(<span class="string">&#x27;your_jd_username&#x27;</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:#nloginpwd&#x27;</span>).<span class="built_in">input</span>(<span class="string">&#x27;your_jd_password&#x27;</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:#loginsubmit&#x27;</span>).click()  </span><br><span class="line">  </span><br><span class="line">        <span class="variable language_">self</span>.tab.wait.doc_loaded()  </span><br><span class="line">        time.sleep(<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="variable language_">self</span>.verify_login_slider()  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_login_slider</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="comment"># 1.获取滑块图片  </span></span><br><span class="line">        background_bytes = <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:.JDJRV-bigimg img&#x27;</span>).src()  </span><br><span class="line">        cut_bytes = <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:.JDJRV-smallimg img&#x27;</span>).src()  </span><br><span class="line">        <span class="comment"># 2.识别滑块缺口并获取滑动轨迹  </span></span><br><span class="line">        det = ddddocr.DdddOcr(det=<span class="literal">False</span>, ocr=<span class="literal">False</span>, show_ad=<span class="literal">False</span>)  </span><br><span class="line">        result = det.slide_match(cut_bytes, background_bytes, simple_target=<span class="literal">True</span>)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;滑块距离&quot;</span>, result)  </span><br><span class="line">        offset = result[<span class="string">&#x27;target&#x27;</span>][<span class="number">0</span>]  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 拖动的按钮  </span></span><br><span class="line">        move_img = <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:.JDJRV-slide-btn&#x27;</span>)  </span><br><span class="line">        <span class="comment"># 开始拖动  </span></span><br><span class="line">        <span class="variable language_">self</span>.tab.actions.hold(move_img)  </span><br><span class="line">        tracks = get_tracks(offset * <span class="number">342</span> / <span class="number">360</span>)  <span class="comment"># 342/360 为背景图片的实际宽度和渲染宽度之比  </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;轨迹&quot;</span>, tracks)  </span><br><span class="line">        <span class="comment"># 向前滑动  </span></span><br><span class="line">        <span class="keyword">for</span> track <span class="keyword">in</span> tracks[<span class="string">&#x27;move_list&#x27;</span>]:  </span><br><span class="line">            <span class="variable language_">self</span>.tab.actions.move(offset_x=track, offset_y=random.uniform(-<span class="number">7.5</span>, <span class="number">10.5</span>),  </span><br><span class="line">                                  duration=random.uniform(<span class="number">0.01</span>, <span class="number">0.05</span>))  </span><br><span class="line">  </span><br><span class="line">        <span class="variable language_">self</span>.tab.actions.release(move_img)  </span><br><span class="line">        time.sleep(<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.tab.ele(<span class="string">&#x27;css:#JDJRV-wrap-loginsubmit&#x27;</span>).style(<span class="string">&#x27;display&#x27;</span>) != <span class="string">&#x27;none&#x27;</span>:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;滑块验证失败，重新验证&quot;</span>)  </span><br><span class="line">            <span class="variable language_">self</span>.verify_login_slider()  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;滑块验证通过&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    jd = JdCrawler()  </span><br><span class="line">    jd.login()  </span><br></pre></td></tr></table></figure><h2 id="track-py"><a href="#track-py" class="headerlink" title="track.py"></a>track.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_tracks</span>(<span class="params">distance</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;滑块运动轨迹&quot;&quot;&quot;</span>  </span><br><span class="line">    value = <span class="built_in">round</span>(random.uniform(<span class="number">0.55</span>, <span class="number">0.75</span>), <span class="number">2</span>)  </span><br><span class="line">    v, t, sum1 = <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0</span>  </span><br><span class="line">    plus = []  </span><br><span class="line">    mid = distance * value  </span><br><span class="line">    <span class="keyword">while</span> sum1 &lt; distance:  </span><br><span class="line">        <span class="keyword">if</span> sum1 &lt; mid:  </span><br><span class="line">            a = <span class="built_in">round</span>(random.uniform(<span class="number">2.5</span>, <span class="number">3.5</span>), <span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            a = -<span class="built_in">round</span>(random.uniform(<span class="number">2.0</span>, <span class="number">3.5</span>), <span class="number">1</span>)  </span><br><span class="line">        s = v * t + <span class="number">0.5</span> * a * (t ** <span class="number">2</span>)  </span><br><span class="line">        v = v + a * t  </span><br><span class="line">        sum1 += s  </span><br><span class="line">        plus.append(<span class="built_in">round</span>(s))  </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;move_list&quot;</span>: plus&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DrissionPage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探索数据的无限可能：欢迎来到 AnalyzeSphere！</title>
      <link href="/2024/11/05/AnalyzeSphere/"/>
      <url>/2024/11/05/AnalyzeSphere/</url>
      
        <content type="html"><![CDATA[<p>今天和大家分享一个新产品，它可能会改变你对数据分析的看法。</p><h1 id="什么是-AnalyzeSphere？"><a href="#什么是-AnalyzeSphere？" class="headerlink" title="什么是 AnalyzeSphere？"></a>什么是 <a href="https://www.analyze-sphere.com/">AnalyzeSphere</a>？</h1><p>简单来说，<a href="https://www.analyze-sphere.com/">AnalyzeSphere</a> 是一个超级强大的数据分析工具，旨在帮助你更轻松地理解和利用数据。无论你是企业主、市场营销人员，还是只对数据感兴趣的朋友，我们都希望这个工具能为你带来帮助。</p><h1 id="为什么选择我们？"><a href="#为什么选择我们？" class="headerlink" title="为什么选择我们？"></a>为什么选择我们？</h1><ul><li><p><strong>简单易用</strong>：我们知道，很多数据工具都复杂得让人头疼。<a href="https://www.analyze-sphere.com/">AnalyzeSphere</a> 采用直观的界面设计，让你可以快速上手，不用再花时间去学习繁琐的操作。</p></li><li><p><strong>智能分析</strong>：我们的智能算法会自动帮你找出数据中的趋势和模式，让你能够快速做出决策。这就像有一个聪明的小助手在旁边为你工作！</p></li><li><p><strong>实时更新</strong>：在这个瞬息万变的世界里，我们确保你的数据始终保持最新，让你随时随地都能掌握一手信息。</p></li></ul><h1 id="适合谁？"><a href="#适合谁？" class="headerlink" title="适合谁？"></a>适合谁？</h1><p>无论你是想要深入了解市场动态的创业者，还是希望优化业务流程的团队成员，<a href="https://www.analyze-sphere.com/">AnalyzeSphere</a> 都能为你提供所需的洞察力。我们相信，数据应该是每个人都能轻松获取和理解的资源。</p><h1 id="试试看吧！"><a href="#试试看吧！" class="headerlink" title="试试看吧！"></a>试试看吧！</h1><p>如果你对这个工具感兴趣，不妨访问 <a href="https://www.analyze-sphere.com/">AnalyzeSphere</a>，了解更多信息。非常期待听到你的反馈，也希望能帮助你在数据的海洋中找到属于自己的航道！</p><p>谢谢你的关注，希望我们能一起探索数据的无限可能！</p>]]></content>
      
      
      <categories>
          
          <category> 出海 </category>
          
          <category> 市场分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AnalyzeSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升商品检索结果相关性</title>
      <link href="/2024/02/12/Improve-the-relevance-of-search-results/"/>
      <url>/2024/02/12/Improve-the-relevance-of-search-results/</url>
      
        <content type="html"><![CDATA[<p><strong>命中前提：</strong></p><ol><li>库里存在该商品或与该商品有关联</li><li>关键词尽可能属于商品 title 的子串，或和商品 title 相关</li><li>关键词不能只有型号，要有品牌等信息</li><li>价格区间需要正确传入</li></ol><h1 id="检索服务流程"><a href="#检索服务流程" class="headerlink" title="检索服务流程"></a>检索服务流程</h1><p>前端通过交互界面，输入一段 query，发送请求到检索服务，检索服务根据该 query 去库里查，分别查 ES 库和 Milvus 库，查出来之后通过 RRF 做个排序，然后把结果返回给前端。</p><p>这样做的话，结果的准确性完全取决于用户的关键词是什么。</p><p>这里涉及到几个关键环节：</p><ol><li><p>用户输入 query 环节</p></li><li><p>服务接收并处理 query 环节</p></li><li><p>根据 query 查询数据库环节</p></li><li><p>从库中查询到数据返回给用户环节</p></li></ol><img src="/2024/02/12/Improve-the-relevance-of-search-results/wps1.png" class=""><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><img src="/2024/02/12/Improve-the-relevance-of-search-results/wps2.png" class=""> <h2 id="用户输入-query-环节"><a href="#用户输入-query-环节" class="headerlink" title="用户输入 query 环节"></a>用户输入 query 环节</h2><p>在用户输入环节进行优化，提供输入联想、纠错等功能。</p><p>针对微信公众号这种前端输入无法控制的场景，可能无法在输入这块直接提供优化，但是也可以后置，比如发送完了之后再问一下用户是否要修改为以下提供的 query 等。</p><h3 id="输入联想"><a href="#输入联想" class="headerlink" title="输入联想"></a>输入联想</h3><p>首先需要提供一个 query 模板库，该模板即为用户常输入的一些句式，然后通过用户输入的商品填充用户的输入。在输入到商品时，需要实时从库里查出对应的商品建议提示给用户。</p><p>这块需要准备句式模板库、库里的商品列表。</p><h3 id="纠错"><a href="#纠错" class="headerlink" title="纠错"></a>纠错</h3><p>根据模板和库里的商品，进行实时纠错。纠错时需要提示用户确认。</p><h2 id="服务接收并处理-query-环节"><a href="#服务接收并处理-query-环节" class="headerlink" title="服务接收并处理 query 环节"></a>服务接收并处理 query 环节</h2><p>服务接收到 query 后，对该 query 做一个预处理，该预处理可以将用户的 query 进行分词、纠错、意图理解、上下文理解、商品提取等操作。</p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>分词的目的是为了更好的命中库中的数据，需要根据<strong>业务场景、库里已有的数据</strong>进行针对性分词。</p><p>需要实现的模块：</p><ol><li><p>业务关键词库</p></li><li><p>商品关键词库</p></li></ol><h3 id="纠错-1"><a href="#纠错-1" class="headerlink" title="纠错"></a>纠错</h3><p>根据模板和库里的商品，进行纠错。纠错时需要提示用户确认。如果没有前一环节的纠错时启用该环节。</p><p>需要实现的模块：</p><ol><li><p>模板库</p></li><li><p>纠错服务</p></li></ol><h3 id="意图理解"><a href="#意图理解" class="headerlink" title="意图理解"></a>意图理解</h3><p>模型能力实现。</p><p>理解用户具体想要什么商品。</p><ol><li><p>模型自身的理解能力</p></li><li><p>结合业务、商品库以及商品检索服务生成可提取准确关键词的意图理解</p></li></ol><h3 id="上下文理解"><a href="#上下文理解" class="headerlink" title="上下文理解"></a>上下文理解</h3><p>模型能力实现。</p><p>结合上下文理解用户具体想要什么商品。</p><h3 id="目标商品提取"><a href="#目标商品提取" class="headerlink" title="目标商品提取"></a>目标商品提取</h3><p>目标商品提取，使用库里的商品列表进行比对。这里需要考虑到商品的简称、别称等，可能也需要维护一个库。</p><p>目前提取出来的关键词存在不明确的场景，比如输入blackberry手机，提取出来的关键词有：黑莓9900,P9981,9982,9983，第一个带有黑莓，其他的都只有型号，型号单独当关键词去商品库里查询时，结果和目标商品会差很多。</p><p>故，这里需要使用品牌加型号的方式当关键词。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="/2024/02/12/Improve-the-relevance-of-search-results/wps3.png" class=""></td><td><img src="/2024/02/12/Improve-the-relevance-of-search-results/wps4.jpg" class=""></td></tr></tbody></table><h4 id="提取逻辑"><a href="#提取逻辑" class="headerlink" title="提取逻辑"></a>提取逻辑</h4><p>根据用户输入的 query，通过百科、评价总结等 tool 返回结果，再将几轮对话的上下文作为参数去调用百川模型，最终提取出来关键词。</p><h3 id="句式模板库"><a href="#句式模板库" class="headerlink" title="句式模板库"></a>句式模板库</h3><h3 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h3><h2 id="根据-query-查询数据库环节"><a href="#根据-query-查询数据库环节" class="headerlink" title="根据 query 查询数据库环节"></a>根据 query 查询数据库环节</h2><p>这个环节主要依赖数据库自身能力，能优化的就是数据源和查询参数。</p><p>根据 query 查询数据库环节中，通过优化 ES 的匹配查询能力，以及 Milvus 的向量查询能力。</p><h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><p>ES 的匹配查询能力和分词器有关系，可以优化分词器配置或自定义分词器。</p><h3 id="Milvus"><a href="#Milvus" class="headerlink" title="Milvus"></a>Milvus</h3><p>Milvus 的向量查询能力，依赖对源数据的向量化及查询参数。</p><p>目前是使用商品的 title 字段进行的向量化，查询参数 nprobe 为 128。</p><h2 id="从库中查询到数据返回给用户环节"><a href="#从库中查询到数据返回给用户环节" class="headerlink" title="从库中查询到数据返回给用户环节"></a>从库中查询到数据返回给用户环节</h2><h3 id="RRF-排序"><a href="#RRF-排序" class="headerlink" title="RRF 排序"></a>RRF 排序</h3><p>从库里查询到结果之后，目前是做了 RRF 的排序，即 ES 和 Milvus 都命中的排在前面。</p><p>目前 RRF 的 K 值是 60。</p><h3 id="反向验证"><a href="#反向验证" class="headerlink" title="反向验证"></a>反向验证</h3><p>将查询到的结果和目标商品再进行一次反向匹配，校验库的查询能力，命中的排在前面。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 检索 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
